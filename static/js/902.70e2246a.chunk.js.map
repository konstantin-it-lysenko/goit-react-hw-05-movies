{"version":3,"file":"static/js/902.70e2246a.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Hero/Hero.styled.jsx","components/Hero/Hero.jsx","pages/Home.jsx","service/getMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n\n  @media screen and (min-width: 768px) {\n    gap: 40px;\n  }\n`;\n\nexport const Item = styled.li`\n  width: calc((100% - 50px) / 2);\n  transition: transform 0.3s linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 150px) / 4);\n  }\n\n  @media screen and (min-width: 1024px) {\n    width: calc((100% - 230px) / 6);\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 0.9rem;\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    font-size: 1rem;\n  }\n`;\n","import defaultPoster from '../../images/default-poster.jpeg';\nimport { List, Item, MovieLink, MovieTitle } from './MoviesList.styled';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <section style={{ padding: '40px 0' }}>\n      <List>\n        {movies.map(({ id, original_title, poster_path }) => {\n          return (\n            <Item key={id}>\n              <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                <img\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                      : defaultPoster\n                  }\n                  alt={original_title}\n                />\n                <MovieTitle>{original_title}</MovieTitle>\n              </MovieLink>\n            </Item>\n          );\n        })}\n      </List>\n    </section>\n  );\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const SectionHero = styled.section`\n  padding-top: 40px;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 80px;\n  }\n`;\n\nexport const Heading = styled.h1`\n  margin-bottom: 16px;\n  font-weight: 900;\n  font-size: 2.4rem;\n\n  @media screen and (min-width: 768px) {\n    font-size: 3rem;\n  }\n`;\n\nexport const Text = styled.p`\n  max-width: 440px;\n  word-spacing: 1px;\n  line-height: 1.2;\n  font-weight: 350;\n\n  @media screen and (min-width: 768px) {\n    font-size: 1.2rem;\n    line-height: 1.4;\n  }\n`;\n","import { Heading, SectionHero, Text } from './Hero.styled';\n\nconst Hero = () => {\n  return (\n    <SectionHero>\n      <Heading>Trending today</Heading>\n      <Text>\n        Movies — scary, funny, dramatic, romantic — make us experience a whole\n        range of emotions. Many films — many impressions!\n      </Text>\n    </SectionHero>\n  );\n};\n\nexport default Hero;\n","import Hero from 'components/Hero/Hero';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { useEffect, useState } from 'react';\nimport { getTranding } from 'service/getMovies';\n\nconst Home = () => {\n  const [trendings, setTrendings] = useState([]);\n\n  useEffect(() => {\n    getTrandingMovies();\n  }, []);\n\n  const getTrandingMovies = async () => {\n    try {\n      const response = await getTranding();\n\n      setTrendings(response);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Hero />\n      <MoviesList movies={trendings} />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n    api_key: '3405a2990e159ff0db5f2b7b81775051',\n}\n\nexport const getTranding = async () => {\n    const { data } = await axios.get('trending/movie/week')\n\n    return data.results\n}\n\nexport const getMovieById = async (id) => {\n    const { data } = await axios.get(`movie/${id}`)\n\n    return data\n}\n\nexport const getCastById = async id => {\n    const { data } = await axios.get(`movie/${id}/credits`)\n\n    return data\n}\n\nexport const getReviewsById = async id => {\n    const { data } = await axios.get(`movie/${id}/reviews`)\n\n    return data\n}\n\nexport const getMoviesBySearch = async (query, page) => {\n    const { data } = await axios.get(`search/movie?query=${query}&page=${page}`)\n\n    return data\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","MovieLink","Link","_templateObject3","MovieTitle","_templateObject4","_ref","movies","location","_jsx","style","padding","children","map","_ref2","id","original_title","poster_path","_jsxs","to","concat","state","from","src","defaultPoster","alt","SectionHero","Heading","Text","_useState","useState","_useState2","_slicedToArray","trendings","setTrendings","useEffect","getTrandingMovies","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","getTranding","sent","t0","console","error","stop","apply","arguments","_Fragment","Hero","MoviesList","axios","api_key","_yield$axios$get","data","abrupt","results","getMovieById","_callee2","_yield$axios$get2","_context2","_x","getCastById","_ref3","_callee3","_yield$axios$get3","_context3","_x2","getReviewsById","_ref4","_callee4","_yield$axios$get4","_context4","_x3","getMoviesBySearch","_ref5","_callee5","query","page","_yield$axios$get5","_context5","_x4","_x5"],"sourceRoot":""}